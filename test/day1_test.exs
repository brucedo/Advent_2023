defmodule Day1Test do
  use ExUnit.Case
  doctest Day1

  test "Given some input string bracketing_numbers will return the first and last number found in the string as a tuple" do
    input = "pqr3stu8vwx"

    assert Day1.bracketing_numbers(input) == {3, 8}

  end

  test "Given some input string with only 1 number then bracketing_numbers will return only that number as both first and last" do
    input = "treb7uchet"

    assert Day1.bracketing_numbers(input) == {7, 7}

  end

  test "Given some input string with more than 2 numbers then bracketing_numbers will ignore all middle elements" do
    input = "a1b2c3d4e5f"

    pair = Day1.bracketing_numbers(input)

    assert  pair == {1, 5}
  end

  test "Given a set of lines each of which contains 1 or more digits then decode() will return a list of pairs of the first and last digit in each line" do
    input = ["1abc2", "pqr3stu8vwx", "a1b2c3d4e5f", "treb7uchet"]

    digits = Day1.decode(input, &Day1.bracketing_numbers/1)

    assert digits == [{1, 2}, {3, 8}, {1, 5}, {7, 7}]
  end

  test "Given a sequence of digit tuples, fold() will produce a List of numbers generated by each input tuple such that each number is of the form left * 10 + right" do
    input = [{1, 2}, {3, 8}, {1, 5}, {7, 7}]

    calibrations = Day1.fold(input)

    assert calibrations == [12, 38, 15, 77]

  end

  test "Given a string containing a digits english name, destring will return the underlying digit" do
    one = "one"
    two = "two"
    three = "three"
    four = "four"
    five = "five"
    six = "six"
    seven = "seven"
    eight = "eight"
    nine = "nine"

    assert Day1.destring(one) == 1
    assert Day1.destring(two) == 2
    assert Day1.destring(three) == 3
    assert Day1.destring(four) == 4
    assert Day1.destring(five) == 5
    assert Day1.destring(six) == 6
    assert Day1.destring(seven) == 7
    assert Day1.destring(eight) == 8
    assert Day1.destring(nine) == 9

  end

  test "Given a string containing a single numeric digit, destring will return the underlying number" do
    one = "1"
    two = "2"
    three = "3"
    four = "4"
    five = "5"
    six = "6"
    seven = "7"
    eight = "8"
    nine = "9"

    assert Day1.destring(one) == 1
    assert Day1.destring(two) == 2
    assert Day1.destring(three) == 3
    assert Day1.destring(four) == 4
    assert Day1.destring(five) == 5
    assert Day1.destring(six) == 6
    assert Day1.destring(seven) == 7
    assert Day1.destring(eight) == 8
    assert Day1.destring(nine) == 9
  end

  test "Given a string that starts with a digit written as a word then bracketing_fucked will return the word translated into a digit as the first number" do
    input = "two1"

    assert Day1.bracketing_fucked(input) == {2, 1}

  end

  test "Given a string that ends with a digit written as a word then bracketing_fucked will return the word translated into a digit as the last number" do
    input = "1nine"

    assert Day1.bracketing_fucked(input) == {1, 9}
  end

  test "Given a string that starts and ends with a digit in word form then bracketing_fucked will return both words translated into digit as first and last numbers" do
    input = "eightwothree"

    assert Day1.bracketing_fucked(input) == {8, 3}
  end

  test "Given a string that includes a digit one through nine embedded in another larger number then bracketing_fucked will return only the simple digit" do
    input = "sixteen"

    assert Day1.bracketing_fucked(input) == {6, 6}
  end

  test "Given a string where two digits names bleed into one another then bracketing_fucked will treat each as a valid digit" do
    input = "oneight"

    assert Day1.bracketing_fucked(input) == {1, 8}
  end

  test "Given a sequence of strings with mixed digits and digit words then decode with bracketing_fucked will produce the correct sequence of pairs" do
    input = ["two1nine",  "eightwothree", "abcone2threexyz", "xtwone3four", "4nineeightseven2", "zoneight234", "7pqrstsixteen"]

    numbers = Day1.decode(input, &Day1.bracketing_fucked/1)
    assert numbers == [{2, 9}, {8, 3}, {1, 3}, {2, 4}, {4, 2}, {1, 4}, {7, 6}]
  end

end
